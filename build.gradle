buildscript {
    ext {
        springBootVersion = '2.4.11'
        springDependencyManagement = '1.0.11.RELEASE'
        springCloudVersion = '2020.0.3'

        querydslVersion = '1.0.10'
        querydslSqlVersion = '4.4.0'
        hibernateValidatorVersion = '6.2.0.Final'

        gsonVersion = '2.8.9'

        mapstructVersion = '1.4.2.Final'
        mapstructBindingVersion = '0.2.0'

        logbackVersion = '0.1.5'

        palantirDockerVersion = '0.21.0'

        embeddedRedisVersion = '0.7.2'

        caffeinVersion = '3.0.4'

        micrometerVersion = '1.7.3'

        restdocsApiSpecVersion = '0.15.1'
        asciidoctorConvertVersion = '3.3.2'

        lombokVersion = '1.18.20'

        //s3Version = '2.2.6.RELEASE'

        snippetsDir = file('build/generated-snippets')

    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.epages:restdocs-api-spec-gradle-plugin:0.9.5")
    }
}


plugins {
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "${springDependencyManagement}"
    id "com.ewerk.gradle.plugins.querydsl" version "${querydslVersion}"
    id "com.palantir.docker" version "${palantirDockerVersion}"
    id "com.epages.restdocs-api-spec" version "${restdocsApiSpecVersion}"
    id "org.asciidoctor.jvm.convert" version "${asciidoctorConvertVersion}" // gradle 7 부터는 org.asciidoctor.convert가 아닌asciidoctor.jvm.convert를 사용해야한다.
    id 'java'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.kyo'
version = '1.0.0'
sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // embedded-redis
    implementation group: 'it.ozimov', name: 'embedded-redis', version: "${embeddedRedisVersion}"


    // sleuth
    implementation "org.springframework.cloud:spring-cloud-starter-sleuth"

    // micorometer
    implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // caffein : https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeinVersion}"

    // h2
    compileOnly 'com.h2database:h2'
    testImplementation 'com.h2database:h2' // 테스트 의존성 추가

    // mysql
    runtimeOnly 'mysql:mysql-connector-java'
    // querydsl
    implementation 'com.querydsl:querydsl-jpa'
    implementation group: "com.querydsl", name: "querydsl-sql", version: "${querydslSqlVersion}"
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: "${hibernateValidatorVersion}"

    // gson
    implementation "com.google.code.gson:gson:${gsonVersion}"

    // mapstruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${mapstructBindingVersion}"

    // lombok
    implementation 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok' // 테스트 의존성 추가
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트 의존성 추가

    // log - custom json
    implementation("ch.qos.logback.contrib:logback-json-classic:${logbackVersion}")
    implementation("ch.qos.logback.contrib:logback-jackson:${logbackVersion}")

    // rest docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    // open api spec
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"


    developmentOnly 'org.springframework.boot:spring-boot-devtools'

}


test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}


// asciidoctorj start
// asciidoctor 설정, gradle build 시 test > asciidoctor 순으로 실행
asciidoctor {
    dependsOn test
    inputs.dir snippetsDir

    // 기존에 존재하는 asciidoctor docs를 삭제
    doFirst {
        delete file('src/main/resources/static/docs')
    }
}

// 스니펫을 이용해 문서 작성 후, build - docs - asciidoc 하위에 생기는 html 파일을 BOOT-INF/classes/static/docs로 복사
// jvm 플러그인 버전부터 asciidoctor의 스니핏 파일 생성 경로가 html -> build/docs/asciidoc 로 변경됨
bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"         // /html5를 사용하지 않는다!
        into 'BOOT-INF/classes/static/docs'
    }
}

// build/docs/asciidoc 파일을 src/main/resources/static/docs로 복사
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}
// asciidoctorj end


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// querydsl start
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

compileQuerydsl.doFirst {
    if(file(querydslDir).exists() ) delete(file(querydslDir))
}

// querydsl end


// rest-docs 기반으로 만들어지는 문서 설정을 기반으로 open-api-spec 파일을 생성하여,
// swagger-ui를 띄워서 open-api-spec 파일을 읽는 형식으로 사용
openapi3 {
    server = 'http://localhost/'
    title = 'spring-boot-skeleton-2.4.x api'
    description = 'kyo open api spec test docu'
    version = '1.0.0'
    format = 'yaml'
}


task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

/**
 * @see https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html//#packaging-executable-configuring-launch-script
 */
springBoot {
    /**
     * Spring Boot 리패키징 시 build-info에 추가될 속성
     */
    buildInfo {
        properties {
            additionalProperties = [
                    "written-by": "kyo"
            ]
        }
    }
}



